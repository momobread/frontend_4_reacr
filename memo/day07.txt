
state 불변성
    state 변수는 렌더링이 다시 필요한 값들을 알려주기위해서 사용한다
    setState() 함수가 실행되면 state변수의 값이 변경되었다고 인식하고, 변경된 값을
    re-rendering하게 된다
    하지만 이때, re-rendering 하기전에 기존에 state에 들어있던 값하고, 변경된 갑ㅈㅅ이
    서로 다른지 비교하는 과정을 거친다
    따라서 원본 state 변수는 절대로 손상되어서는 안된다

    const [cnt,setCnt] = useState(0);
    버튼클릭시 () => {
        //원본 데이터가 손상되면 변화된 상태를 비교할 때 의도치 않은 오류가 발생할 수 있다
        //cnt = cnt+1; // 절대 이렇게 원본을 수정하지 않는다
        setCnt(cnt+1);

자바스크립트의 참조값
    일반적인 number타임, str타입,boolean타입 등을 제외한
    객체(배열,Date,사용자정의객체) 등은 변수에 해당객체의 주소값이 들어간다
    변수는 객체 그 자체를 의미하는 것이 아니라 객체가 위치해 있는 주소값을 알고(참조)있다

    let ar1=[10,20,30];
    let ar2=ar1;

    ar2.push(50)
    console.log(ar1) //[10,20,30,50]


    }
    
    React에서 DOM요소 가져오기
    자바스크립트에서는 DOM가져오기 위해서는
    document.queryselector()
    document.getElementById()
    ....
    등등의 함수를 사용한다

    하지만 리엑트에서는 해당 방식을 지양한다
    왜냐하면 해당 요소가 re-rendering이 되었을 경우 오류가 발생할 수 있기 때문에
    이때 사용할 수 있는 것이 바로 useRef()리다
    
    const 변수명 = useRef();
    -->해당 변수명을 가진 객체를 가져올 수 있습니다

    ex)
        const test = useRef();


        <div ref={test} onClick = .....>안녕</div>





