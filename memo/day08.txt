리엑트의 이벤트함수(javascript에서 배웠을 때는 on--속성)
    ex) onClick={}


    리엑트의 이벤트 함수는 camel표기법을 따르며 (onclick->onClick)
    함수를 실행시키는것이 아니라 실행시킬 함수를 전달하는것이다
   
    함수() 하면 실행이고 
    함수만 쓰면 그냥 전달하는 것이고
    
    html, javascript
        <button onclick={console.log('안녕')}
        속성에서 함수를 바로 실행

    react
        <button onclick = {console.log} --> 틀릭될때마다 이벤트객체가 출력되고(자동으로 매개변수로 event를 넘어가게 설정되어 있어서)
        onclick이라는 props에다가 console.log 라는 함수를 전달
        내부적으로 전달받은 함수를 실행시키는 것이 원리
        (react에다가  console.log함수를 전달하는거지!!그렇게 내부적으로 실행하는 것이다)
        이때 전달된 함수의 매개변수에는 event 객체(어떤태그에서 발생한 이벤트인지,x축,y축)가 넘어간다

        이때 전달된 함수가 실행될 때 매개변수로 이벤트객체가 아닌 다른 값을 전달받고 싶다면?
        해당 함수를 감싸는 함수를 만들면 된다

        <button onClick ={()=>{}} >


강사님 저게 버튼이 제대로 작동이 안하는게 icon안에 
<close/>가 안에 있어서 막 src 눌렸다가 path눌렸다가 그러는 거잖아요 그러면 그냥 <close>를 밖에빼고 IconButton같은걸 close 안에 넣으면 안되나요




1. useRef 여러개 사용하는 방법

    변수명 = useRef(null);//useRef 매개변수 자리는 current를 무엇으로 초기화할지 알려주는 자리다
    <컴포넌트 ref={변수명}/>

    위와 같이 사용하게 되면 변수명 객체 안에 current라는 key(속성)값으로
    해당 컴포넌트가 대입된다
    따라서 해당 컴포넌트를 참조하고 싶을때 변수명.current로 접근하여 사용할 수 있다
    
    이때 컴포넌트 ref props에다 함수를 넘겨주면
    그함 수의 매개변수로는 자기자신 컴포넌트가 전달된다
    변수명 = useRef(null);
    <컴포넌트 ref()={매개변수 => 해당변수명[0] = 매개변수}/>
    이렇게 사용하게 되면 ref변수에는 0번째 방(key,속성)이 생기고
    그 안에는 해당 컴포넌트가 대입된다
    따라서 해당 컴포넌트를 참조하고 싶을때 변수명[0]으로 접근하여 사용한다



리엑트의 컴포넌트의 생명주기
    리엑트의 컴포넌트는 부모에게는 영향을 미치지 않지만 자식에게는 영향을 미친다
    리엑트 컴포넌트의 상태가 변화된다면 re-rendering을 하는데, 이때 상태변화된 컴포넌트의
    자식 컴포넌트는 모두 re-rendering이 된다


re-rendering될때 성능을 향상시키는 방법
    1.useRef
        굳이 렌더링이 될 필요없는 변수를 state로 설정하면 메모리상에 낭비가 발생
        (state가 바뀔 때 마다 re-rendering이 되는데 화면상에서는 필요없는 변수라면)
    2.useMemo   
        memoization

react rendering 되는 요소 확인하기
    개발자도구 react developer tools
    chrome 웹스토어 > react developer 
2. useMemo






